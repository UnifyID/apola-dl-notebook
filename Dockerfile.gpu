# Set the base image to Ubuntu
FROM tensorflow/tensorflow:1.1.0-gpu-py3

# File Author / Maintainer
MAINTAINER Lef Ioannidis

# Install cuda
ENV CUDA_VERSION 8.0.61

ENV CUDA_PKG_VERSION 8-0=$CUDA_VERSION-1

RUN NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \
    NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 && \
    apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub && \
    apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +5 > cudasign.pub && \
    echo "$NVIDIA_GPGKEY_SUM  cudasign.pub" | sha256sum -c --strict - && rm cudasign.pub && \
    echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/cuda.list


RUN apt-get update && \
    apt-get install -yq --no-install-recommends libboost-all-dev && \
    apt-get install -yqq software-properties-common \
    python \
    python-dev \
    python-setuptools \
    git \
    wget \
    cmake \
    libgoogle-glog-dev \
    libprotobuf-dev \
    libopencv-dev \
    libhdf5-serial-dev \
    protobuf-compiler

RUN wget -qO - http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub | apt-key add - && \
	apt-get update && apt-get install -y --no-install-recommends --force-yes \
        cuda-core-$CUDA_PKG_VERSION \
        cuda-misc-headers-$CUDA_PKG_VERSION \
        cuda-command-line-tools-$CUDA_PKG_VERSION \
        cuda-license-$CUDA_PKG_VERSION \
        cuda-nvrtc-dev-$CUDA_PKG_VERSION \
        cuda-cusolver-dev-$CUDA_PKG_VERSION \
        cuda-cublas-dev-$CUDA_PKG_VERSION \
        cuda-cufft-dev-$CUDA_PKG_VERSION \
        cuda-curand-dev-$CUDA_PKG_VERSION \
        cuda-cusparse-dev-$CUDA_PKG_VERSION \
        cuda-npp-dev-$CUDA_PKG_VERSION \
        cuda-cudart-dev-$CUDA_PKG_VERSION \
        cuda-driver-dev-$CUDA_PKG_VERSION && \
    ln -s cuda-8.0 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

RUN echo "/usr/local/cuda/lib" >> /etc/ld.so.conf.d/cuda.conf && \
    echo "/usr/local/cuda/lib64" >> /etc/ld.so.conf.d/cuda.conf && \
    ldconfig

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

# Torch7 installation scripts - http://torch.ch/docs/getting-started.html
RUN git clone https://github.com/torch/distro.git /root/torch --recursive && \
    cd /root/torch && \
    bash install-deps && \
    ./install.sh

COPY requirements.txt .
# Keras installation for Python
RUN pip install --upgrade pip && \
    pip install --upgrade nose && \
    pip install -r requirements.txt && \
    rm requirements.txt

RUN git clone https://github.com/nphoff/saxpy.git /root/saxpy
ENV PYTHONPATH=/root/saxpy:$PYTHONPATH

# Export environment variables manually
ENV PATH /root/torch/install/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua'
ENV LUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so'
ENV LD_LIBRARY_PATH /root/torch/install/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}
ENV DYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH
ENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH
ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs:${LIBRARY_PATH}

# Install iTorch
RUN git clone https://github.com/facebook/iTorch.git && \
    cd iTorch && \
    luarocks install lbase64 && \
    luarocks install uuid && \
    luarocks install luacrypto && \
    luarocks install lzmq && \
    luarocks install cutorch && \
    luarocks install csvigo && \
    luarocks install cunn && \
    luarocks install cunnx && \
    luarocks install rnn && \
    luarocks install async && \
    luarocks install luasocket && \
    luarocks install s3 && \
    luarocks install threads && \
    luarocks install ftcsv && \
    luarocks install https://raw.githubusercontent.com/benglard/htmlua/master/htmlua-scm-1.rockspec && \
    luarocks install --server=http://luarocks.org/dev lua-promises && \
    luarocks install https://raw.githubusercontent.com/soumith/cudnn.torch/R4/cudnn-scm-1.rockspec && \
    luarocks make && \
    echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc


# Expose ports
EXPOSE 8888

WORKDIR /notebooks


CMD ["/run_jupyter.sh", "--allow-root"]
